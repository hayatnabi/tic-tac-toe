<div style="text-align:center; margin-top:20px; font-size: 1rem; font-weight: bold; white-space: pre-line;" id="status">
  India's turn
</div>
<div id="board">
  <!-- Horizontal lines -->
  <div class="line-horizontal line-1"></div>
  <div class="line-horizontal line-2"></div>
  <!-- Vertical lines -->
  <div class="line-vertical line-v1"></div>
  <div class="line-vertical line-v2"></div>
</div>
<div style="display: flex; gap: 10px; justify-content: center; margin-top: 35px;">
  <%= button_to root_path, method: :get, class: 'btn-back btn waves-effect waves-light blue darken-2 white-text', form: { style: 'display: inline' } do %>
    <span style="display: flex; align-items: center; justify-content: center; height: 100%; width: 100%; font-weight: bold; text-transform: none;">
      „Åè&nbsp;Back
    </span>
  <% end %>
  <div style="text-align:center;">
    <button id="reset-btn"
          class="btn waves-effect waves-light red lighten-2 white-text"
          style="font-size: 1rem; font-weight: bold; display: inline-flex; align-items: center; justify-content: center; border-radius: 10px; padding: 10px 24px; text-transform: none;">
      ‚Ü∫&nbsp;Reset Game
    </button>
  </div>
</div>
<script>
  (() => {
    const board = document.getElementById('board');
    const status = document.getElementById('status');
    const resetBtn = document.getElementById('reset-btn');
    const modeSelect = document.getElementById('mode-select');

    let currentPlayer = 'I';
    let gameActive = true;
    let message = "";
    let gameState = Array(9).fill(null);
    let vsComputer = false;

    // Create buttons dynamically and position them
    for (let i = 0; i < 9; i++) {
      const btn = document.createElement('button');
      btn.classList.add('cell');
      const row = Math.floor(i / 3);
      const col = i % 3;
      btn.style.top = `${row * 150}px`;
      btn.style.left = `${col * 150}px`;
      btn.dataset.index = i;
      btn.addEventListener('click', onCellClick);
      board.appendChild(btn);
    }

    function checkWin() {
      const winningLines = [
        [0,1,2],[3,4,5],[6,7,8],  // rows
        [0,3,6],[1,4,7],[2,5,8],  // columns
        [0,4,8],[2,4,6]           // diagonals
      ];
      for (const line of winningLines) {
        const [a,b,c] = line;
        if (gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c]) {
          return line; // return winning line indices
        }
      }
      return null;
    }
    function onCellClick(e) {
      const btn = e.target;
      const index = parseInt(btn.dataset.index);
      if (!gameActive || gameState[index]) return;

      gameState[index] = currentPlayer;
      btn.textContent = currentPlayer;
      btn.disabled = true;
      btn.classList.add('selected');

      const winningLine = checkWin();
      if (winningLine) {
        if (currentPlayer == "P") {
          message = "Pakistan zindabad! üíö Victory tastes sweet!\nAnother crash landing for India! üí•"
          handleGameEnd('P')
        } else {
          message = "Well played ü§° but the green side wins as 'RAWFAILED' üò≠ü§≠üòÑ"
          handleGameEnd('I')
        }
        status.textContent = message;
        gameActive = false;
        winningLine.forEach(i => {
          const winningBtn = document.querySelector(`button.cell[data-index="${i}"]`);
          if (winningBtn) winningBtn.classList.add('winning-cell');
        });
        return;
      }

      if (gameState.every(cell => cell !== null)) {
        status.textContent = "It's a draw... Even the rivalry took a fantastic tea break ‚òïÔ∏èüòÜ";
        handleGameEnd('')
        gameActive = false;
        return;
      }

      currentPlayer = currentPlayer === 'I' ? 'P' : 'I';
      status.textContent = currentPlayer === 'I' ? "India's turn" : "Pakistan's turn";

      if (vsComputer && currentPlayer === 'P') {
        setTimeout(makeComputerMove, 100);
      }
    }

    function makeComputerMove() {
      if (!gameActive) return;
      let emptyIndices = gameState.map((val, i) => val === null ? i : null).filter(i => i !== null);
      if (emptyIndices.length === 0) return;
      let choice = emptyIndices[Math.floor(Math.random() * emptyIndices.length)];

      const btn = document.querySelector(`button.cell[data-index="${choice}"]`);
      gameState[choice] = 'P';
      btn.textContent = 'P';
      btn.disabled = true;
      btn.classList.add('selected');

      const winningLine = checkWin();
      if (winningLine) {
        status.textContent = "Pakistan zindabad! üíö Victory tastes sweet!\nAnother crash landing for India! üí•";
        handleGameEnd('P')
        gameActive = false;
        winningLine.forEach(i => {
          const winningBtn = document.querySelector(`button.cell[data-index="${i}"]`);
          if (winningBtn) winningBtn.classList.add('winning-cell');
        });
        return;
      }

      if (gameState.every(cell => cell !== null)) {
        status.textContent = "It's a draw... Even the rivalry took a fantastic tea break ‚òïÔ∏èüòÜ";
        handleGameEnd('')
        gameActive = false;
        return;
      }

      currentPlayer = 'I';
      status.textContent = "India's turn";
    }

    function resetGame() {
      gameState.fill(null);
      currentPlayer = 'I';
      gameActive = true;
      status.textContent = `India's turn`;
      document.querySelectorAll('button.cell').forEach(btn => {
        btn.disabled = false;
        btn.textContent = '';
        btn.classList.remove('selected', 'winning-cell');
      });
    }

    resetBtn.addEventListener('click', resetGame);
    modeSelect.addEventListener('change', () => {
      vsComputer = modeSelect.value === 'vs-computer';
      resetGame();
    });
  })();

  let iWins = <%= session[:i_wins] || 0 %>;
  let pWins = <%= session[:p_wins] || 0 %>;
  let ties  = <%= session[:ties] || 0 %>;

  function updateScoreboard(x, o, t) {
    document.getElementById('score-x').textContent = x;
    document.getElementById('score-o').textContent = o;
    document.getElementById('score-tie').textContent = t;
  }

  // Run this after page loads
  document.addEventListener('DOMContentLoaded', () => {
    updateScoreboard(iWins, pWins, ties);
  });

  // Call this function from your game logic
  function handleGameEnd(winner) {
    if (winner === 'I') {
      iWins++;
    } else if (winner === 'P') {
      pWins++;
    } else {
      ties++;
    }
    updateScoreboard(iWins, pWins, ties);
  }
</script>
